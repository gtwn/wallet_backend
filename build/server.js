const app = require("./app");
const debug = require("debug")("node-angular");
const http = require("http");

const normalizePort = val => {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

const onError = error => {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + port;
  debug("Listening on " + bind);
};

const port = normalizePort(process.env.PORT || "8081");
app.set("port", port);

const server = http.createServer(app);
server.on("error", onError);
server.on("listening", onListening);
server.listen(port);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiYXBwIiwicmVxdWlyZSIsImRlYnVnIiwiaHR0cCIsIm5vcm1hbGl6ZVBvcnQiLCJ2YWwiLCJwb3J0IiwicGFyc2VJbnQiLCJpc05hTiIsIm9uRXJyb3IiLCJlcnJvciIsInN5c2NhbGwiLCJiaW5kIiwiYWRkciIsImNvZGUiLCJjb25zb2xlIiwicHJvY2VzcyIsImV4aXQiLCJvbkxpc3RlbmluZyIsInNlcnZlciIsImFkZHJlc3MiLCJlbnYiLCJQT1JUIiwic2V0IiwiY3JlYXRlU2VydmVyIiwib24iLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU1DLFFBQVEsT0FBUixDQUFaO0FBQ0EsTUFBTUMsUUFBUUQsUUFBUSxPQUFSLEVBQWlCLGNBQWpCLENBQWQ7QUFDQSxNQUFNRSxPQUFPRixRQUFRLE1BQVIsQ0FBYjs7QUFFQSxNQUFNRyxnQkFBZ0JDLE9BQU87QUFDM0IsTUFBSUMsT0FBT0MsU0FBU0YsR0FBVCxFQUFjLEVBQWQsQ0FBWDs7QUFFQSxNQUFJRyxNQUFNRixJQUFOLENBQUosRUFBaUI7QUFDZjtBQUNBLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJQyxRQUFRLENBQVosRUFBZTtBQUNiO0FBQ0EsV0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNELENBZEQ7O0FBZ0JBLE1BQU1HLFVBQVVDLFNBQVM7QUFDdkIsTUFBSUEsTUFBTUMsT0FBTixLQUFrQixRQUF0QixFQUFnQztBQUM5QixVQUFNRCxLQUFOO0FBQ0Q7QUFDRCxRQUFNRSxPQUFPLE9BQU9DLElBQVAsS0FBZ0IsUUFBaEIsR0FBMkIsVUFBVUEsSUFBckMsR0FBNEMsVUFBVVAsSUFBbkU7QUFDQSxVQUFRSSxNQUFNSSxJQUFkO0FBQ0UsU0FBSyxRQUFMO0FBQ0VDLGNBQVFMLEtBQVIsQ0FBY0UsT0FBTywrQkFBckI7QUFDQUksY0FBUUMsSUFBUixDQUFhLENBQWI7QUFDQTtBQUNGLFNBQUssWUFBTDtBQUNFRixjQUFRTCxLQUFSLENBQWNFLE9BQU8sb0JBQXJCO0FBQ0FJLGNBQVFDLElBQVIsQ0FBYSxDQUFiO0FBQ0E7QUFDRjtBQUNFLFlBQU1QLEtBQU47QUFWSjtBQVlELENBakJEOztBQW1CQSxNQUFNUSxjQUFjLE1BQU07QUFDeEIsUUFBTUwsT0FBT00sT0FBT0MsT0FBUCxFQUFiO0FBQ0EsUUFBTVIsT0FBTyxPQUFPQyxJQUFQLEtBQWdCLFFBQWhCLEdBQTJCLFVBQVVBLElBQXJDLEdBQTRDLFVBQVVQLElBQW5FO0FBQ0FKLFFBQU0sa0JBQWtCVSxJQUF4QjtBQUNELENBSkQ7O0FBTUEsTUFBTU4sT0FBT0YsY0FBY1ksUUFBUUssR0FBUixDQUFZQyxJQUFaLElBQW9CLE1BQWxDLENBQWI7QUFDQXRCLElBQUl1QixHQUFKLENBQVEsTUFBUixFQUFnQmpCLElBQWhCOztBQUVBLE1BQU1hLFNBQVNoQixLQUFLcUIsWUFBTCxDQUFrQnhCLEdBQWxCLENBQWY7QUFDQW1CLE9BQU9NLEVBQVAsQ0FBVSxPQUFWLEVBQW1CaEIsT0FBbkI7QUFDQVUsT0FBT00sRUFBUCxDQUFVLFdBQVYsRUFBdUJQLFdBQXZCO0FBQ0FDLE9BQU9PLE1BQVAsQ0FBY3BCLElBQWQiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXBwID0gcmVxdWlyZShcIi4vYXBwXCIpO1xyXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm5vZGUtYW5ndWxhclwiKTtcclxuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xyXG5cclxuY29uc3Qgbm9ybWFsaXplUG9ydCA9IHZhbCA9PiB7XHJcbiAgdmFyIHBvcnQgPSBwYXJzZUludCh2YWwsIDEwKTtcclxuXHJcbiAgaWYgKGlzTmFOKHBvcnQpKSB7XHJcbiAgICAvLyBuYW1lZCBwaXBlXHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIH1cclxuXHJcbiAgaWYgKHBvcnQgPj0gMCkge1xyXG4gICAgLy8gcG9ydCBudW1iZXJcclxuICAgIHJldHVybiBwb3J0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuY29uc3Qgb25FcnJvciA9IGVycm9yID0+IHtcclxuICBpZiAoZXJyb3Iuc3lzY2FsbCAhPT0gXCJsaXN0ZW5cIikge1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG4gIGNvbnN0IGJpbmQgPSB0eXBlb2YgYWRkciA9PT0gXCJzdHJpbmdcIiA/IFwicGlwZSBcIiArIGFkZHIgOiBcInBvcnQgXCIgKyBwb3J0O1xyXG4gIHN3aXRjaCAoZXJyb3IuY29kZSkge1xyXG4gICAgY2FzZSBcIkVBQ0NFU1wiOlxyXG4gICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyBcIiByZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzXCIpO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBcIkVBRERSSU5VU0VcIjpcclxuICAgICAgY29uc29sZS5lcnJvcihiaW5kICsgXCIgaXMgYWxyZWFkeSBpbiB1c2VcIik7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBvbkxpc3RlbmluZyA9ICgpID0+IHtcclxuICBjb25zdCBhZGRyID0gc2VydmVyLmFkZHJlc3MoKTtcclxuICBjb25zdCBiaW5kID0gdHlwZW9mIGFkZHIgPT09IFwic3RyaW5nXCIgPyBcInBpcGUgXCIgKyBhZGRyIDogXCJwb3J0IFwiICsgcG9ydDtcclxuICBkZWJ1ZyhcIkxpc3RlbmluZyBvbiBcIiArIGJpbmQpO1xyXG59O1xyXG5cclxuY29uc3QgcG9ydCA9IG5vcm1hbGl6ZVBvcnQocHJvY2Vzcy5lbnYuUE9SVCB8fCBcIjgwODFcIik7XHJcbmFwcC5zZXQoXCJwb3J0XCIsIHBvcnQpO1xyXG5cclxuY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcclxuc2VydmVyLm9uKFwiZXJyb3JcIiwgb25FcnJvcik7XHJcbnNlcnZlci5vbihcImxpc3RlbmluZ1wiLCBvbkxpc3RlbmluZyk7XHJcbnNlcnZlci5saXN0ZW4ocG9ydCk7XHJcbiJdfQ==