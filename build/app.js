const path = require("path");
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const swaggerJSDoc = require("swagger-jsdoc");
const userRoutes = require("./routes/user");
const func = require("./routes/func");
const api = require("./routes/func");
const app = express();
const swaggerUi = require("swagger-ui-express");
const swaggerOptions = {
  swaggerDefinition: {
    info: {
      title: "Backend",
      description: "++++",
      servers: ["http://localhost:8081"]
    }
  },
  apis: ["./routes/func.js"]
};
mongoose.set("useCreateIndex", true);
mongoose.connect("mongodb+srv://gtwn:" + process.env.MONGO_ATLAS_PW + "@cluster0-aarl2.mongodb.net/node-angular", { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: false }).then(() => {
  console.log("Connected to database!");
}).catch(() => {
  console.log("Connection failed!");
});
const swaggerDos = swaggerJSDoc(swaggerOptions);
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDos));
app.use("/images", express.static(path.join("backend/images")));

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, PUT, DELETE, OPTIONS");
  next();
});

app.use("/api/user", userRoutes);
app.use("/api/func", func);
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJleHByZXNzIiwiYm9keVBhcnNlciIsIm1vbmdvb3NlIiwic3dhZ2dlckpTRG9jIiwidXNlclJvdXRlcyIsImZ1bmMiLCJhcGkiLCJhcHAiLCJzd2FnZ2VyVWkiLCJzd2FnZ2VyT3B0aW9ucyIsInN3YWdnZXJEZWZpbml0aW9uIiwiaW5mbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJzZXJ2ZXJzIiwiYXBpcyIsInNldCIsImNvbm5lY3QiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09fQVRMQVNfUFciLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VGaW5kQW5kTW9kaWZ5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsInN3YWdnZXJEb3MiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic2VydmUiLCJzZXR1cCIsInN0YXRpYyIsImpvaW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2V0SGVhZGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNQyxVQUFVRCxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNRSxhQUFhRixRQUFRLGFBQVIsQ0FBbkI7QUFDQSxNQUFNRyxXQUFXSCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxNQUFNSSxlQUFlSixRQUFRLGVBQVIsQ0FBckI7QUFDQSxNQUFNSyxhQUFhTCxRQUFRLGdCQUFSLENBQW5CO0FBQ0EsTUFBTU0sT0FBT04sUUFBUSxnQkFBUixDQUFiO0FBQ0EsTUFBTU8sTUFBTVAsUUFBUSxnQkFBUixDQUFaO0FBQ0EsTUFBTVEsTUFBTVAsU0FBWjtBQUNBLE1BQU1RLFlBQVlULFFBQVEsb0JBQVIsQ0FBbEI7QUFDQSxNQUFNVSxpQkFBaUI7QUFDckJDLHFCQUFtQjtBQUNqQkMsVUFBTTtBQUNKQyxhQUFPLFNBREg7QUFFSkMsbUJBQWEsTUFGVDtBQUdKQyxlQUFTLENBQUMsdUJBQUQ7QUFITDtBQURXLEdBREU7QUFRckJDLFFBQU0sQ0FBQyxrQkFBRDtBQVJlLENBQXZCO0FBVUFiLFNBQVNjLEdBQVQsQ0FBYSxnQkFBYixFQUErQixJQUEvQjtBQUNBZCxTQUNHZSxPQURILENBRUksd0JBQ0VDLFFBQVFDLEdBQVIsQ0FBWUMsY0FEZCxHQUVFLDBDQUpOLEVBS0ksRUFBRUMsaUJBQWlCLElBQW5CLEVBQXlCQyxvQkFBb0IsSUFBN0MsRUFBbURDLGtCQUFrQixLQUFyRSxFQUxKLEVBT0dDLElBUEgsQ0FPUSxNQUFNO0FBQ1ZDLFVBQVFDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELENBVEgsRUFVR0MsS0FWSCxDQVVTLE1BQU07QUFDWEYsVUFBUUMsR0FBUixDQUFZLG9CQUFaO0FBQ0QsQ0FaSDtBQWFBLE1BQU1FLGFBQWF6QixhQUFhTSxjQUFiLENBQW5CO0FBQ0FGLElBQUlzQixHQUFKLENBQVE1QixXQUFXNkIsSUFBWCxFQUFSO0FBQ0F2QixJQUFJc0IsR0FBSixDQUFRNUIsV0FBVzhCLFVBQVgsQ0FBc0IsRUFBRUMsVUFBVSxLQUFaLEVBQXRCLENBQVI7QUFDQXpCLElBQUlzQixHQUFKLENBQVEsV0FBUixFQUFxQnJCLFVBQVV5QixLQUEvQixFQUFzQ3pCLFVBQVUwQixLQUFWLENBQWdCTixVQUFoQixDQUF0QztBQUNBckIsSUFBSXNCLEdBQUosQ0FBUSxTQUFSLEVBQW1CN0IsUUFBUW1DLE1BQVIsQ0FBZXJDLEtBQUtzQyxJQUFMLENBQVUsZ0JBQVYsQ0FBZixDQUFuQjs7QUFFQTdCLElBQUlzQixHQUFKLENBQVEsQ0FBQ1EsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsS0FBb0I7QUFDMUJELE1BQUlFLFNBQUosQ0FBYyw2QkFBZCxFQUE2QyxHQUE3QztBQUNBRixNQUFJRSxTQUFKLENBQ0UsOEJBREYsRUFFRSwrREFGRjtBQUlBRixNQUFJRSxTQUFKLENBQ0UsOEJBREYsRUFFRSx3Q0FGRjtBQUlBRDtBQUNELENBWEQ7O0FBYUFoQyxJQUFJc0IsR0FBSixDQUFRLFdBQVIsRUFBcUJ6QixVQUFyQjtBQUNBRyxJQUFJc0IsR0FBSixDQUFRLFdBQVIsRUFBcUJ4QixJQUFyQjtBQUNBb0MsT0FBT0MsT0FBUCxHQUFpQm5DLEdBQWpCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xyXG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xyXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcclxuY29uc3Qgc3dhZ2dlckpTRG9jID0gcmVxdWlyZShcInN3YWdnZXItanNkb2NcIik7XHJcbmNvbnN0IHVzZXJSb3V0ZXMgPSByZXF1aXJlKFwiLi4vcm91dGVzL3VzZXJcIik7XHJcbmNvbnN0IGZ1bmMgPSByZXF1aXJlKFwiLi4vcm91dGVzL2Z1bmNcIik7XHJcbmNvbnN0IGFwaSA9IHJlcXVpcmUoXCIuLi9yb3V0ZXMvZnVuY1wiKTtcclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5jb25zdCBzd2FnZ2VyVWkgPSByZXF1aXJlKFwic3dhZ2dlci11aS1leHByZXNzXCIpO1xyXG5jb25zdCBzd2FnZ2VyT3B0aW9ucyA9IHtcclxuICBzd2FnZ2VyRGVmaW5pdGlvbjoge1xyXG4gICAgaW5mbzoge1xyXG4gICAgICB0aXRsZTogXCJCYWNrZW5kXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIisrKytcIixcclxuICAgICAgc2VydmVyczogW1wiaHR0cDovL2xvY2FsaG9zdDo4MDgxXCJdXHJcbiAgICB9XHJcbiAgfSxcclxuICBhcGlzOiBbXCIuL3JvdXRlcy9mdW5jLmpzXCJdXHJcbn07XHJcbm1vbmdvb3NlLnNldChcInVzZUNyZWF0ZUluZGV4XCIsIHRydWUpO1xyXG5tb25nb29zZVxyXG4gIC5jb25uZWN0KFxyXG4gICAgXCJtb25nb2RiK3NydjovL2d0d246XCIgK1xyXG4gICAgICBwcm9jZXNzLmVudi5NT05HT19BVExBU19QVyArXHJcbiAgICAgIFwiQGNsdXN0ZXIwLWFhcmwyLm1vbmdvZGIubmV0L25vZGUtYW5ndWxhclwiLFxyXG4gICAgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSwgdXNlRmluZEFuZE1vZGlmeTogZmFsc2UgfVxyXG4gIClcclxuICAudGhlbigoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3RlZCB0byBkYXRhYmFzZSFcIik7XHJcbiAgfSlcclxuICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIGZhaWxlZCFcIik7XHJcbiAgfSk7XHJcbmNvbnN0IHN3YWdnZXJEb3MgPSBzd2FnZ2VySlNEb2Moc3dhZ2dlck9wdGlvbnMpO1xyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xyXG5hcHAudXNlKFwiL2FwaS1kb2NzXCIsIHN3YWdnZXJVaS5zZXJ2ZSwgc3dhZ2dlclVpLnNldHVwKHN3YWdnZXJEb3MpKTtcclxuYXBwLnVzZShcIi9pbWFnZXNcIiwgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKFwiYmFja2VuZC9pbWFnZXNcIikpKTtcclxuXHJcbmFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XHJcbiAgcmVzLnNldEhlYWRlcihcclxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLFxyXG4gICAgXCJPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0LCBBdXRob3JpemF0aW9uXCJcclxuICApO1xyXG4gIHJlcy5zZXRIZWFkZXIoXHJcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIixcclxuICAgIFwiR0VULCBQT1NULCBQQVRDSCwgUFVULCBERUxFVEUsIE9QVElPTlNcIlxyXG4gICk7XHJcbiAgbmV4dCgpO1xyXG59KTtcclxuXHJcbmFwcC51c2UoXCIvYXBpL3VzZXJcIiwgdXNlclJvdXRlcyk7XHJcbmFwcC51c2UoXCIvYXBpL2Z1bmNcIiwgZnVuYyk7XHJcbm1vZHVsZS5leHBvcnRzID0gYXBwO1xyXG4iXX0=